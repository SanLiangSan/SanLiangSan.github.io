<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sanliangsan的博客</title>
  
  <subtitle>爱学习 | 爱美食 | 爱摄影 | 爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-02T15:41:14.687Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xu XingLing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KVC原理和自定义</title>
    <link href="http://yoursite.com/2020/03/02/KVC%E5%8E%9F%E7%90%86%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <id>http://yoursite.com/2020/03/02/KVC%E5%8E%9F%E7%90%86%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89/</id>
    <published>2020-03-02T14:57:24.000Z</published>
    <updated>2020-03-02T15:41:14.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、KVC简介"><a href="#1、KVC简介" class="headerlink" title="1、KVC简介"></a><strong>1、KVC简介</strong></h2><p><code>KVC</code>其实就是键值对<code>Key-Value Coding</code>,它是苹果提供给我们处理对象的一种机制。<a id="more"></a>通常我们对属性的操作会通过他的<code>set</code>和<code>get</code>方法，但是这需要我们指定相应的<code>setKey</code>或<code>getKey</code>等方法，随着属性列表的增长我们访问这些属性也必须如此。相反，<code>key-value coding</code>提供了一个简单的消息传递接口，允许我们通过这个统一的接口去改变所有的属性<code>(这其实就是我们通常用的json转model的原理)</code>。</p><h2 id="2、KVC原理分析"><a href="#2、KVC原理分析" class="headerlink" title="2、KVC原理分析"></a><strong>2、KVC原理分析</strong></h2><hr><h3 id="2-1-KVC设值过程"><a href="#2-1-KVC设值过程" class="headerlink" title="2.1 KVC设值过程"></a>2.1 KVC设值过程</h3><p><code>kvc</code>的设值会调用<code>setValue：forKey：</code>其设值过程流程图如下：</p><p><code>![kvc](https://s2.ax1x.com/2020/03/02/3fMoan.md.jpg)</code></p><p><code>1.</code>按顺序查找<code>set</code>和<code>_set</code>这些方法，如果找到立即调用相应方法并传递name参数设值，结束。</p><p><code>2.</code>如果没有找到以上的所有方法，判断<code>accessInstanceVariablesDirectly</code>方法返回值如果返回<code>YES</code>,依次判断<code>_key</code>,<code>_is</code>,<code>key</code>,<code>isKey</code>等成员变量是否存在，根据顺序存在即赋值并结束。</p><p><code>3.</code>如果<code>accessInstanceVariablesDirectly</code>方法也返回<code>NO</code>，或者上述所有成员变量均不存在，调用<code>setValue:forUndefinedKey:</code>并抛出异常并崩溃。</p><p><code>4.</code>注意,KVC的设值都是对成员变量的值进行操作，上述<code>_key</code>,<code>_is</code>,<code>key</code>,<code>isKey</code>等都是成员变量，而不是属性，属性设值的本质其实就是调用<code>set</code>方法，其内部就是对成员变量进行赋值，通常我们只定义了<code>@property</code>的属性，只不过是系统自动帮我们生成了相应的成员变量。</p><h3 id="2-2-KVC取值过程"><a href="#2-2-KVC取值过程" class="headerlink" title="2.2 KVC取值过程"></a>2.2 KVC取值过程</h3><p><code>kvc</code>的取值会调用<code>ValueForKey：</code>但是其对值的搜索过程不同于<code>setValue：forKey：</code>。</p><p><code>1.</code>依次查找实例方法：<code>get&lt;key&gt;</code>,<code>&lt;key&gt;</code>, <code>is&lt;Key&gt;</code>,<code>_&lt;key&gt;</code>,如果找到跳转到第<code>5</code>步。</p><p><code>2.</code> 判断是否属于NSArrray,基于是否找到NSArray相关的实例方法如：<code>countOf&lt;Key&gt;</code>,<code>objectIn&lt;Key&gt;AtIndex:</code>或<code>&lt;key&gt;AtIndexes</code>。</p><p><code>3.</code> 判断是否属于NSSet,基于是否有NSSet相关的方法:<code>countOf&lt;Key&gt;</code>, <code>enumeratorOf&lt;Key&gt;</code>或 <code>and memberOf&lt;Key&gt;:</code>。</p><p><code>4.</code>    如果上述方法都不存在，判断对象的类方法accessInstanceVariablesDirectly 返回值，如果返回YES，按顺序查找成员变量<code>_&lt;key&gt;</code>, <code>_is&lt;Key&gt;</code>, <code>&lt;key&gt;</code>或 <code>is&lt;Key&gt;</code>，如果找到直接直接获取实例变量的值并跳到<code>5</code>继续执行，否则执行<code>6</code>。</p><p><code>5.</code>    检索属性值，如果是指针对象，直接返回结果；如果该值是可转化为<code>NSNumber</code>类型的值，那么将该值转化为<code>NSNumber</code>并返回；除此以外将该值转化为<code>NSValue</code>类型的值作为结果返回。</p><p><code>6.</code>    如果上述过程都失败，调用<code>valueForUndefinedKey:</code>并抛出一个异常。</p><h2 id="3-自定义KVC"><a href="#3-自定义KVC" class="headerlink" title="3.自定义KVC"></a><strong>3.自定义KVC</strong></h2><h3 id="3-1-思路"><a href="#3-1-思路" class="headerlink" title="3.1 思路"></a>3.1 思路</h3><p><code>1.</code>    既然针对的是对象，那么我们就应该是针对<code>NSObject</code>的一个扩展<code>Category</code>。</p><p><code>2.</code>    结合上面我们了解了<code>KVC</code>有取值和设值的过程，所以我们要自定义<code>setValue：forKey：</code>以及<code>ValueForKey：</code>的方法。</p><p><code>3.</code>    <code>customSetValue:forKey:</code>方法：</p><ul><li>查找 set 和 _set 方法。</li><li>根据 accessInstanceVariablesDirectly 方法的返回值一次判断<code>_key</code>,<code>_is</code>,<code>key</code>, <code>isKey</code>等实例变量，找到实例变量并复制，结束。</li><li>如果没找到抛异常。</li></ul><p><code>4.</code>    <code>customValueForKey:</code>方法:</p><ul><li>找到相关方法 get countOf objectInAtIndex找到返回相应方法的返回值作为结果。</li><li>根据 accessInstanceVariablesDirectly 方法的返回值一次判断<code>_key</code>,<code>_is</code>,<code>key</code>, <code>isKey</code>等实例变量，找到实例变量直接返回，结束。</li><li>如果没找到抛异常。</li></ul><h3 id="3-2-具体实现"><a href="#3-2-具体实现" class="headerlink" title="3.2 具体实现"></a>3.2 具体实现</h3><p><code>- (void)customSetValue:(nullable id)value forKey:(NSString *)key</code>方法实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">- (void)customSetValue:(nullable id)value forKey:(NSString *)key&#123;</span><br><span class="line">    &#x2F;&#x2F; 容错判断</span><br><span class="line">    if (key &#x3D;&#x3D; nil  || key.length &#x3D;&#x3D; 0) return;</span><br><span class="line">    &#x2F;&#x2F; 找到相关方法 set&lt;Key&gt; _set&lt;Key&gt; setIs&lt;Key&gt;</span><br><span class="line">    NSString *Key &#x3D; key.capitalizedString;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 拼接方法</span><br><span class="line">    NSString *setKey &#x3D; [NSString stringWithFormat:@&quot;set%@:&quot;,Key];</span><br><span class="line">    NSString *_setKey &#x3D; [NSString stringWithFormat:@&quot;_set%@:&quot;,Key];</span><br><span class="line">    NSString *setIsKey &#x3D; [NSString stringWithFormat:@&quot;setIs%@:&quot;,Key];</span><br><span class="line">    NSArray *methodList &#x3D; @[setKey,_setKey,setIsKey];</span><br><span class="line">    for (NSInteger i &#x3D; 0; i &lt; methodList.count; i ++) &#123;</span><br><span class="line">        NSString *methodName &#x3D; methodList[i];</span><br><span class="line">        if ([self respondsToSelector:NSSelectorFromString(key)]) &#123;</span><br><span class="line">#pragma clang diagnostic push</span><br><span class="line">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span><br><span class="line">            [self performSelector:NSSelectorFromString(methodName) withObject:value];</span><br><span class="line">#pragma clang diagnostic pop</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 判断是否能够直接赋值实例变量</span><br><span class="line">    if (![self.class accessInstanceVariablesDirectly] ) &#123;</span><br><span class="line">        @throw [NSException exceptionWithName:@&quot;UnknownKeyException&quot; reason:[NSString stringWithFormat:@&quot;****[%@ valueForUndefinedKey:]: this class is not key value coding-compliant for the key name.****&quot;,self] userInfo:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 找相关实例变量进行赋值</span><br><span class="line">    NSMutableArray *mArray &#x3D; [NSMutableArray arrayWithCapacity:1];</span><br><span class="line">    unsigned int count &#x3D; 0;</span><br><span class="line">    Ivar *ivars &#x3D; class_copyIvarList([self class], &amp;count);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;count; i++) &#123;</span><br><span class="line">        Ivar ivar &#x3D; ivars[i];</span><br><span class="line">        const char *ivarNameChar &#x3D; ivar_getName(ivar);</span><br><span class="line">        NSString *ivarName &#x3D; [NSString stringWithUTF8String:ivarNameChar];</span><br><span class="line">        [mArray addObject:ivarName];</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivars);</span><br><span class="line">    </span><br><span class="line">    NSArray *appendPrefix &#x3D; @[@&quot;_&quot;,@&quot;_is&quot;,@&quot;&quot;,@&quot;is&quot;];</span><br><span class="line">    for (NSInteger i &#x3D; 0; i &lt; appendPrefix.count; i ++) &#123;</span><br><span class="line">        NSString *instanceName &#x3D; [NSString stringWithFormat:@&quot;%@%@&quot;,appendPrefix[i],key];</span><br><span class="line">        if ([mArray containsObject:instanceName]) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取相应的 ivar</span><br><span class="line">            Ivar ivar &#x3D; class_getInstanceVariable([self class], instanceName.UTF8String);</span><br><span class="line">            &#x2F;&#x2F; 对相应的 ivar 设置值</span><br><span class="line">            object_setIvar(self , ivar, value);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 如果找不到相关实例</span><br><span class="line">    @throw [NSException exceptionWithName:@&quot;UnknownKeyException&quot; reason:[NSString stringWithFormat:@&quot;****[%@ %@]: this class is not key value coding-compliant for the key name.****&quot;,self,NSStringFromSelector(_cmd)] userInfo:nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>- (id)customValueForKey:(NSString *)key</code>实现如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">- (id)customValueForKey:(NSString *)key&#123;</span><br><span class="line">    &#x2F;&#x2F; 容错</span><br><span class="line">    if (key &#x3D;&#x3D; nil  || key.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 找到相关方法 get&lt;Key&gt; &lt;key&gt; countOf&lt;Key&gt;  objectIn&lt;Key&gt;AtIndex</span><br><span class="line">    NSString *Key &#x3D; key.capitalizedString;</span><br><span class="line">    &#x2F;&#x2F; 拼接方法</span><br><span class="line">    NSString *getKey &#x3D; [NSString stringWithFormat:@&quot;get%@&quot;,Key];</span><br><span class="line">    NSString *countOfKey &#x3D; [NSString stringWithFormat:@&quot;countOf%@&quot;,Key];</span><br><span class="line">    NSString *objectInKeyAtIndex &#x3D; [NSString stringWithFormat:@&quot;objectIn%@AtIndex:&quot;,Key];</span><br><span class="line">        </span><br><span class="line">#pragma clang diagnostic push</span><br><span class="line">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span><br><span class="line">    if ([self respondsToSelector:NSSelectorFromString(getKey)]) &#123;</span><br><span class="line">        return [self performSelector:NSSelectorFromString(getKey)];</span><br><span class="line">    &#125;else if ([self respondsToSelector:NSSelectorFromString(key)])&#123;</span><br><span class="line">        return [self performSelector:NSSelectorFromString(key)];</span><br><span class="line">    &#125;else if ([self respondsToSelector:NSSelectorFromString(countOfKey)])&#123;</span><br><span class="line">        if ([self respondsToSelector:NSSelectorFromString(objectInKeyAtIndex)]) &#123;</span><br><span class="line">            int num &#x3D; (int)[self performSelector:NSSelectorFromString(countOfKey)];</span><br><span class="line">            NSMutableArray *mArray &#x3D; [NSMutableArray arrayWithCapacity:1];</span><br><span class="line">            for (int i &#x3D; 0; i&lt;num-1; i++) &#123;</span><br><span class="line">                num &#x3D; (int)[self performSelector:NSSelectorFromString(countOfKey)];</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j &#x3D; 0; j&lt;num; j++) &#123;</span><br><span class="line">                id objc &#x3D; [self performSelector:NSSelectorFromString(objectInKeyAtIndex) withObject:@(num)];</span><br><span class="line">                [mArray addObject:objc];</span><br><span class="line">            &#125;</span><br><span class="line">            return mArray;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">#pragma clang diagnostic pop</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 判断是否能够直接赋值实例变量</span><br><span class="line">    if (![self.class accessInstanceVariablesDirectly] ) &#123;</span><br><span class="line">        @throw [NSException exceptionWithName:@&quot;UnknownKeyException&quot; reason:[NSString stringWithFormat:@&quot;****[%@ valueForUndefinedKey:]: this class is not key value coding-compliant for the key name.****&quot;,self] userInfo:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 找相关实例变量进行赋值</span><br><span class="line">    NSMutableArray *mArray &#x3D; [NSMutableArray arrayWithCapacity:1];</span><br><span class="line">    unsigned int count &#x3D; 0;</span><br><span class="line">    Ivar *ivars &#x3D; class_copyIvarList([self class], &amp;count);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;count; i++) &#123;</span><br><span class="line">        Ivar ivar &#x3D; ivars[i];</span><br><span class="line">        const char *ivarNameChar &#x3D; ivar_getName(ivar);</span><br><span class="line">        NSString *ivarName &#x3D; [NSString stringWithUTF8String:ivarNameChar];</span><br><span class="line">        [mArray addObject:ivarName];</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivars);</span><br><span class="line"> </span><br><span class="line">    NSArray *appendPrefix &#x3D; @[@&quot;_&quot;,@&quot;_is&quot;,@&quot;&quot;,@&quot;is&quot;];</span><br><span class="line">    for (NSInteger i &#x3D; 0; i &lt; appendPrefix.count; i ++) &#123;</span><br><span class="line">        NSString *instanceName &#x3D; [NSString stringWithFormat:@&quot;%@%@&quot;,appendPrefix[i],key];</span><br><span class="line">        if ([mArray containsObject:instanceName]) &#123;</span><br><span class="line">            Ivar ivar &#x3D; class_getInstanceVariable([self class], instanceName.UTF8String);</span><br><span class="line">            return object_getIvar(self, ivar);;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-KVC使用的一些细节"><a href="#4-KVC使用的一些细节" class="headerlink" title="4.KVC使用的一些细节"></a><strong>4.KVC使用的一些细节</strong></h2><p><code>1.</code>    针对<code>Int</code>类型的<code>key</code>的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[object setValue:@123 forKey:@&quot;count&quot;];</span><br></pre></td></tr></table></figure><p><code>2.</code>    如果对Int类型的传一个NSString的值如：[object setValue:@”123” forKey:@”count”]，系统会自动帮我们转换成__NSCFNumber的类型，说明<code>KVC</code>具有自动转型的功能。</p><p><code>3.</code>    结构体的取值以及设值要转换为<code>NSValue</code>作为中间媒介。</p><p><code>4.</code>    <code>setNilValueForKey:</code>的方法只针对NSNumber（int，bool, etc..）以及NSValue（结构体）相关的数据生效，针对指针对象赋值<code>nil</code>并不会走到这个方法。</p><p><code>5.</code>    集合操作符的使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; @sum用来计算集合中right keyPath指定的属性的总和</span><br><span class="line"></span><br><span class="line">NSNumber *sum &#x3D; [bookrack valueForKeyPath:@&quot;@sum.bookPrice&quot;];</span><br><span class="line">NSLog(@&quot;sum: %f&quot;, [sum floatValue]);</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; @avg用来计算集合中right keyPath指定的属性的平均值</span><br><span class="line"></span><br><span class="line">NSNumber *avgNum &#x3D; [bookrack valueForKeyPath:@&quot;@avg.bookPrice&quot;];</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; @max,@min 用来查找集合中right keyPath指定属性的最大值和最小值</span><br><span class="line"></span><br><span class="line">NSNumber *max &#x3D; [bookrack valueForKeyPath:@&quot;@max.bookPrice&quot;];</span><br><span class="line">NSNumber *min &#x3D; [bookrack valueForKeyPath:@&quot;@min.bookPrice&quot;];</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; @unionOfObjects将集合中的所有对象的同一个属性放在数组中返回。</span><br><span class="line"></span><br><span class="line">NSArray *priceArray &#x3D; [bookrack valueForKeyPath:@&quot;@unionOfObjects.bookPrice&quot;];</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; @distinctUnionOfObjects将集合中对象的属性进行去重后并返回。</span><br><span class="line"></span><br><span class="line">NSArray *nameArray &#x3D; [bookrack valueForKeyPath:@&quot;@distinctUnionOfObjects.bookName&quot;];</span><br></pre></td></tr></table></figure><p><code>6.</code>    如果在集合对象中操作的属性，本来就是<code>NSNumber</code>类型，则可以像下面这样，直接用<code>self代表值自身</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSArray *array &#x3D; @[@(productA.price), @(productB.price), @(productC.price), @(productD.price)];</span><br><span class="line">NSNumber *avg &#x3D; [array valueForKeyPath:@&quot;@avg.self&quot;];</span><br></pre></td></tr></table></figure><p><code>7.</code>    <code>KVC</code>在实践中也有很多用处,例如<code>UITabbar</code>或<code>UIPageControl</code>这样的控件，系统已经为我们封装好了，但是对于一些样式的改变并没有提供足够的<code>API</code>，这种情况就需要我们用<code>KVC</code>进行操作了</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a><strong>5、总结</strong></h2><p>以上就是个人针对<code>KVC</code>的一些总结，有问题希望您随时提出。现在正值新型肺炎疫情期间，大家或许有的已经开始复工了，有的或许还在家进行隔离，希望大家都注意保护自己，保护家人，保护大家。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、KVC简介&quot;&gt;&lt;a href=&quot;#1、KVC简介&quot; class=&quot;headerlink&quot; title=&quot;1、KVC简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、KVC简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;KVC&lt;/code&gt;其实就是键值对&lt;code&gt;Key-Value Coding&lt;/code&gt;,它是苹果提供给我们处理对象的一种机制。
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>拼搏,为了更好的明天</title>
    <link href="http://yoursite.com/2020/03/02/%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/03/02/%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%BB%BA/</id>
    <published>2020-03-02T03:32:02.000Z</published>
    <updated>2020-03-02T11:21:24.136Z</updated>
    
    <content type="html"><![CDATA[<p>2020年3月2日：花了半天的时间，终于把自己的博客搭建好了，新的地方,新的开始，希望自己能持续的输出…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2020年3月2日：花了半天的时间，终于把自己的博客搭建好了，新的地方,新的开始，希望自己能持续的输出…&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
